{
  "tasks": [
    {
      "metadata": {
        "task_type": "graph_bfs",
        "hardware": {
          "cpus": [
            {
              "cores": 20,
              "threads": 16,
              "frequency": "3.6 GHz",
              "available": "True"
            }
          ],
          "gpu": {
            "cuda_cores": 10496,
            "memory": {
              "size": "24 GB",
              "type": "GDDR6X"
            },
            "available": "True"
          }
        },
        "code": "#include <vector>\n\nvoid bfs(const Graph& graph, int start, std::vector<int>& result) {\n    int numVertices = graph.numVertices;\n    result.assign(numVertices, -1);\n    result[start] = 0;\n\n    std::vector<int> current_level;\n    current_level.reserve(numVertices);\n    current_level.push_back(start);\n\n    std::vector<int> next_level;\n    next_level.reserve(numVertices);\n\n    int current_distance = 0;\n\n    while (!current_level.empty()) {\n        for (int node : current_level) {\n            int start_edge = graph.offset[node];\n            int end_edge = graph.offset[node + 1];\n\n            for (int i = start_edge; i < end_edge; ++i) {\n                int neighbor = graph.edges[i];\n                if (result[neighbor] == -1) {\n                    result[neighbor] = current_distance + 1;\n                    next_level.push_back(neighbor);\n                }\n            }\n        }\n\n        current_level.swap(next_level);\n        next_level.clear();\n        current_distance++;\n    }\n}",
        "framework": "Serial"
      }
    }
  ]
}