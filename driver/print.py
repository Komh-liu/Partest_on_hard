print("#include <omp.h>\n#include <vector>\n\nusing Matrix = std::vector<std::vector<int>>;\n\nvoid matrix_multiply(const Matrix& A, Matrix& result) {\n    int rowsA = A.size();\n    int colsA = A[0].size();\n    int colsB = result[0].size();\n\n    // Initialize the result matrix with zeros\n    for (int i = 0; i < rowsA; ++i) {\n        for (int j = 0; j < colsB; ++j) {\n            result[i][j] = 0;\n        }\n    }\n\n    #pragma omp parallel for collapse(2)\n    for (int i = 0; i < rowsA; ++i) {\n        for (int j = 0; j < colsB; ++j) {\n            for (int k = 0; k < colsA; ++k) {\n                result[i][j] += A[i][k] * A[k][j];\n            }\n        }\n    }\n}")