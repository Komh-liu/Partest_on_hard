{
  "tasks": [
    {
      "metadata": {
        "task_type": "array_sum",
        "hardware": {
          "cpus": [
            {
              "cores": 12,
              "threads": 32,
              "frequency": "3.6 GHz",
              "available": "True"
            }
          ],
          "gpu": {
            "cuda_cores": 10496,
            "memory": {
              "size": "24 GB",
              "type": "GDDR6X"
            },
            "available": "True"
          }
        },
        "code": "#include <vector>\n#include <omp.h>\n\nusing Array = std::vector<long long>;\n\nlong long array_sum(const Array& arr) {\n    long long sum = 0;\n    #pragma omp parallel for reduction(+:sum) schedule(static)\n    for (size_t i = 0; i < arr.size(); ++i) {\n        sum += arr[i];\n    }\n    return sum;\n}",
        "framework": "OpenMP"
      }
    },
    {
      "metadata": {
        "task_type": "matrix_multiply",
        "hardware": {
          "cpus": [
            {
              "cores": 12,
              "threads": 32,
              "frequency": "3.6 GHz",
              "available": "True"
            }
          ],
          "gpu": {
            "cuda_cores": 10496,
            "memory": {
              "size": "24 GB",
              "type": "GDDR6X"
            },
            "available": "True"
          }
        },
        "code": "#include <vector>\n#include <omp.h>\n\nusing Matrix = std::vector<std::vector<int>>;\n\nvoid matrix_multiply(const Matrix& A, Matrix& result) {\n    int n = A.size();\n    if (n == 0) return;\n    int m = A[0].size();\n    \n    result.resize(n);\n    for (auto& row : result) row.resize(n);\n    \n    #pragma omp parallel for schedule(dynamic)\n    for (int i = 0; i < n; ++i) {\n        const auto& row_i = A[i];\n        for (int j = 0; j <= i; ++j) {\n            const auto& row_j = A[j];\n            int sum = 0;\n            for (int k = 0; k < m; ++k) {\n                sum += row_i[k] * row_j[k];\n            }\n            result[i][j] = sum;\n            if (i != j) result[j][i] = sum;\n        }\n    }\n}",
        "framework": "OpenMP"
      }
    },
    {
      "metadata": {
        "task_type": "graph_bfs",
        "hardware": {
          "cpus": [
            {
              "cores": 12,
              "threads": 32,
              "frequency": "3.6 GHz",
              "available": "True"
            }
          ],
          "gpu": {
            "cuda_cores": 10496,
            "memory": {
              "size": "24 GB",
              "type": "GDDR6X"
            },
            "available": "True"
          }
        },
        "code": "#include <vector>\n#include <atomic>\n#include <omp.h>\n\nvoid bfs(const Graph& graph, int start, std::vector<int>& result) {\n    const int num_vertices = graph.numVertices;\n    result.assign(num_vertices, -1);\n    result[start] = 0;\n\n    std::vector<int> current_level, next_level;\n    current_level.reserve(num_vertices);\n    current_level.push_back(start);\n\n    std::atomic_flag* visited = new std::atomic_flag[num_vertices];\n    for(int i = 0; i < num_vertices; ++i)\n        visited[i].clear();\n    visited[start].test_and_set();\n\n    while(!current_level.empty()) {\n        next_level.clear();\n        std::atomic<int> next_offset(0);\n        next_level.resize(current_level.size() * 2);\n\n        #pragma omp parallel for schedule(dynamic, 64)\n        for(size_t i = 0; i < current_level.size(); ++i) {\n            int u = current_level[i];\n            int degree = graph.offset[u+1] - graph.offset[u];\n            \n            for(int j = 0; j < degree; ++j) {\n                int v = graph.edges[graph.offset[u] + j];\n                if(!visited[v].test_and_set()) {\n                    result[v] = result[u] + 1;\n                    int pos = next_offset.fetch_add(1, std::memory_order_relaxed);\n                    if(pos >= static_cast<int>(next_level.size())) {\n                        #pragma omp critical\n                        {\n                            if(pos >= static_cast<int>(next_level.size()))\n                                next_level.resize(next_level.size() * 2);\n                        }\n                    }\n                    next_level[pos] = v;\n                }\n            }\n        }\n\n        next_level.resize(next_offset.load());\n        current_level.swap(next_level);\n    }\n\n    delete[] visited;\n}",
        "framework": "OpenMP"
      }
    }
  ]
}