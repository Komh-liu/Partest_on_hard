{
  "tasks": [
    {
      "metadata": {
        "task_type": "graph_bfs",
        "hardware": {
          "cpus": [
            {
              "cores": 20,
              "threads": 16,
              "frequency": "3.6 GHz",
              "available": "True"
            }
          ],
          "gpu": {
            "cuda_cores": 10496,
            "memory": {
              "size": "24 GB",
              "type": "GDDR6X"
            },
            "available": "True"
          }
        },
        "code": "#include <omp.h>\n#include <vector>\n#include <queue>\n\nvoid bfs(const Graph& graph, int start, std::vector<int> & result) {\n    std::vector<bool> visited(graph.numVertices, false);\n    std::queue<int> q;\n    q.push(start);\n    visited[start] = true;\n    result[start] = 0;\n\n    while (!q.empty()) {\n        int current = q.front();\n        q.pop();\n\n        // MODIFIED: Set the number of threads to 64 for the parallel region\n        #pragma omp parallel for num_threads(64)\n        for (int i = graph.offset[current]; i < graph.offset[current + 1]; ++i) {\n            int neighbor = graph.edges[i];\n            if (!visited[neighbor]) {\n                #pragma omp critical\n                {\n                    if (!visited[neighbor]) { // Double-check within critical section\n                        visited[neighbor] = true;\n                        result[neighbor] = result[current] + 1;\n                        q.push(neighbor);\n                    }\n                }\n            }\n        }\n    }\n}",
        "framework": "OpenMP"
      },
      "modification_record": {
        "round": 1,
        "requirements": "降低时间开销 tread为64",
        "error_info": "无"
      }
    }
  ]
}